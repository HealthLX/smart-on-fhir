plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile "org.springframework.security:spring-security-oauth2-client:5.2.0.RELEASE"
    compile "org.springframework.security:spring-security-oauth2-jose:5.2.0.RELEASE"
    compile "javax.servlet:javax.servlet-api:4.0.1"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testCompile "org.mockito:mockito-core:2.21.0"
}

test {
    useJUnitPlatform()
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
artifacts
{
    archives javadocJar, sourcesJar
}
uploadArchives
        {
            repositories
                    {
                        mavenDeployer
                                {
                                    beforeDeployment
                                            {
                                                MavenDeployment deployment -> signing.signPom(deployment)
                                            }
                                    repository(url: maven2_url) {
                                        authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
                                    }
                                    snapshotRepository(url: snapshot_url) {
                                        authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
                                    }
                                    pom.project
                                            {
                                                name project_name
                                                packaging 'jar'
                                                description project_description
                                                url project_url
                                                scm {
                                                    connection project_scm
                                                    developerConnection project_scm
                                                    url project_url
                                                }
                                                licenses {
                                                    license {
                                                        name project_license_slug
                                                        url project_license_url
                                                    }
                                                }
                                                developers {
                                                    developer {
                                                        id project_developer
                                                        name project_developer
                                                    }
                                                }
                                            }
                                }
                    }
        }
import org.gradle.plugins.signing.Sign
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects { ext."signing.keyId" = System.getenv('GPG_KEY_ID') }
        allprojects { ext."signing.secretKeyRingFile" = System.getenv('GPG_KEY_LOCATION') }
        allprojects { ext."signing.password" = System.getenv('GPG_PASSPHRASE') }
    }
    // Do not sign archives by default (a local build without gpg keyring should succeed)
    if (taskGraph.allTasks.any { it.name == 'build' || it.name == 'assemble' }) {
        tasks.findAll { it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar' }.each { task ->
            task.enabled = false
        }
    }
}
signing
        {
            sign configurations.archives
        }
build.dependsOn.remove(signArchives)

def uploadAndRelease(def username, def password, def repoDir) {
    def proc = ['./uploadAndRelease.sh', username, password, repoDir].execute([], file("${rootDir.toString()}/gradle"))
    proc.waitForProcessOutput(System.out, System.err)
}

task publishToNexusAndClose(dependsOn: 'publish'){
    doLast {
        uploadAndRelease(System.getenv('SONATYPE_USERNAME'), System.getenv('SONATYPE_PASSWORD'), "$rootDir/build/deploy")
    }
}